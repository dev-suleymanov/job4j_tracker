1. Запустим SrartUI и выполним команду jps в терминале.

3968 Launcher
9280 RemoteMavenServer36
11220 Jps               
11748 StartUI
5172   

Мы получили pid, который равен 11748. Идём дальше.

2. Создадим 10000 объектов и выполним команду jmap -histo 11748 в терминале.

 num     #instances         #bytes  class name (module)
-------------------------------------------------------
   1:         94880        4349520  [B (java.base@17.0.4.1)
   2:         38890        2379576  [I (java.base@17.0.4.1)
   3:         12510        1200960  sun.util.calendar.Gregorian$Date (java.base@
17.0.4.1)
   4:         37513         900312  java.lang.String (java.base@17.0.4.1)       
   5:          6255         850680  org.postgresql.jdbc.PgResultSet
   6:          6255         750600  org.postgresql.jdbc.PgPreparedStatement     
   7:         12545         702520  sun.util.calendar.ZoneInfo (java.base@17.0.4
.1)
   8:          6256         700672  java.util.GregorianCalendar (java.base@17.0.
4.1)
   9:         14983         666104  [Ljava.lang.Object; (java.base@17.0.4.1)    
  10:         18779         600928  java.util.concurrent.locks.ReentrantLock$Non
	
  ...
  
   950:             1             16  sun.util.cldr.CLDRLocaleProviderAdapter$$Lam
bda$51/0x800000059 (java.base@17.0.4.1)
 951:             1             16  sun.util.locale.InternalLocaleBuilder$CaseIn
sensitiveChar (java.base@17.0.4.1)
 952:             1             16  sun.util.locale.provider.CalendarDataUtility
$CalendarWeekParameterGetter (java.base@17.0.4.1)
 953:             1             16  sun.util.locale.provider.TimeZoneNameUtility
$TimeZoneNameGetter (java.base@17.0.4.1)
 954:             1             16  sun.util.resources.LocaleData$LocaleDataStra
tegy (java.base@17.0.4.1)
 955:             1             16  sun.util.resources.cldr.provider.CLDRLocaleD
ataMetaInfo (jdk.localedata@17.0.4.1)
Total        463268       19817344

Вы увидим какие объекты созданы и в каком количестве.

3. Теперь посмотрим сводную информацию о состоянии памяти программы, выполнив команду jstat -gc 11748 1s 10 в терминал.

  S0C         S1C         S0U         S1U          EC           EU           O
C           OU          MC         MU       CCSC      CCSU     YGC     YGCT     
FGC    FGCT     CGC    CGCT       GCT
        0,0      4096,0         0,0      2256,4     153600,0      26624,0      9
2160,0       4030,5     6592,0     6299,6     768,0     623,9      3     0,007  
   0     0,000     0     0,000     0,007

4. Теперь попробуем понаблюдать за состоянием памяти с помощью графического интерфейса JConsole. 
Остановим предыдущий процесс. Удалим предыдущие 10000 объектов. 
Выполним команду jconsole в терминал и создадим снова 10000 объектов, паралелльно наблюдая за процессом JConsole.
Процесс будет виден на скринах.

before_add_objects.png - состояние до добавления 10000 объектов.
after_add_objects.png - состояние после добавления 10000 объектов. Можем заметить, как использоваемая память резко изменилась. 
